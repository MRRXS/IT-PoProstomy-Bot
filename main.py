import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import re

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token="5874949026:AAEpEtlhGNGpNzL94OFfmL9ENsS6Clgqb3s")
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ratings = {}
reputation = {}
text_help = """
<em>
/start - —Å—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
/help - –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ 
/description - –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞
</em>
"""
text_description = """
<b>–í –º–æ–∂–ª–∏–≤–æ—Å—Ç—è—Ö –±–æ—Ç–∞, —î —Ä–µ–π—Ç–∏–Ω–≥ —ñ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è</b>
  
<b>–†–µ–π—Ç–∏–Ω–≥</b> - <em>–∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –±–∞–ª–∏.
–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤ —á–∞—Ç –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–ª–æ–≤–æ "—Ä–µ–π—Ç–∏–Ω–≥"</em>

<b>–†–µ–ø—É—Ç–∞—Ü—ñ—è</b> - <em>—è–∫—â–æ –≤–∞–º —Ö—Ç–æ—Å—å –¥–æ–ø–æ–º—ñ–≥, –≤–∏ –º–æ–∂–µ—Ç–µ —Ü—ñ–π –ª—é–¥–∏–Ω—ñ –¥–æ–±–∞–≤–∏—Ç–∏  —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó .
–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó,–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤ —á–∞—Ç –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—É–∫–≤—É " /r "</em>
"""

@dp.message_handler(commands=['description'])
async def description_command(message: types.Message):
    await message.answer(text_description, parse_mode=types.ParseMode.HTML)
    await message.delete()
@dp.message_handler(regexp=re.compile(r"^–¥—è–∫—É—é", re.IGNORECASE))
async def get_reputation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in reputation:
        reputation[user_id] = 0
    await message.reply('–Ø–∫—â–æ –≤–∞–º —Ö—Ç–æ—Å—å –ø–æ–º—ñ–≥, –º–æ–∂–µ—Ç–µ –π–æ–º—É –¥–æ–±–∞–≤–∏—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /rüòâ')

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def on_new_chat_members(message: types.Message):
    new_members = message.new_chat_members
    for member in new_members:
        await bot.send_message(chat_id=message.chat.id,
                               text=f"–í—ñ—Ç–∞—î–º–æ —É c—ñ–º'—ó! {member.first_name}!")

@dp.message_handler(commands=['help'])
async  def help_comand_bot(message: types.Message):
    await message.answer(text_help, parse_mode=types.ParseMode.HTML)
    await message.delete()

@dp.message_handler(regexp=re.compile(r"^—Ä–µ–ø—É—Ç–∞—Ü—ñ—è", re.IGNORECASE))
async def get_reputation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in reputation:
        reputation[user_id] = 0
    await message.reply(f'–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—è: {reputation[user_id]}')

@dp.message_handler(commands=['r'])
async def give_reputation(message: types.Message):
    user_id = message.from_user.id
    reply_to_message = message.reply_to_message
    if reply_to_message is None:
        await message.reply('–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.')
        return
    target_user_id = reply_to_message.from_user.id
    if target_user_id == user_id:
        await message.reply('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Å–∞–º–æ–º—É —Å–æ–±—ñ.')
        return
    if target_user_id not in reputation:
        reputation[target_user_id] = 0
    reputation[target_user_id] += 1
    await message.reply(f'–†–µ–ø—É—Ç–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {reply_to_message.from_user.username} –∑–±—ñ–ª—å—à–µ–Ω–∞ –Ω–∞ 1.')

@dp.message_handler(commands=['start'])
async def start_command(message:types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç,–≤—ñ—Ç–∞—î–º–æ —É —Å—ñ–º'—ó! –Ø —á–∞—Ç-–±–æ—Ç –Ü–¢-–ù–∞ —Ö–ª–æ–ø—Å—å–∫–∏–π —Ä–æ–∑—É–º! /help - —Ü–µ —Ç–µ, —â–æ —è –º–æ–∂—É.")
    await message.delete()
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /rating
@dp.message_handler(regexp=re.compile(r"^—Ä–µ–π—Ç–∏–Ω–≥", re.IGNORECASE))
async def rating_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    sorted_ratings = [(k, v) for k, v in ratings.items()]
    sorted_ratings.sort(key=lambda x: x[1], reverse=True)

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = "<b>–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"
    for i, item in enumerate(sorted_ratings, start=1):
        text += f"{i}. {item[0]} - {item[1]}\n"

    await message.reply(text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def text_message(message: types.Message):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–ª–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rating = random.randint(1, 1)

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∫ —Ä–µ–π—Ç–∏–Ω–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.username in ratings:
        ratings[message.from_user.username] += rating
    else:
        ratings[message.from_user.username] = rating

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)